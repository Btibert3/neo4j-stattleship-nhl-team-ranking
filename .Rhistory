options(stringsAsFactors = FALSE)
## packages
library(stattleshipR)
library(dplyr)
library(lubridate)
library(stringr)
## set the token
set_token(Sys.getenv("STATTLE_TOKEN"))
## helper function
parse_stattle <- function(stattle_list, entry) {
x <- do.call("rbind", lapply(stattle_list, function(x) x[[entry]]))
stopifnot(is.data.frame(x))
return(x)
}
hockey_games(team_id="")
games_ss <- ss_get_result(ep="games", walk = TRUE)
save(games_ss, file="test-games.rdata")
options(stringsAsFactors = FALSE)
## packages
library(stattleshipR)
library(dplyr)
library(lubridate)
library(stringr)
## set the token
set_token(Sys.getenv("STATTLE_TOKEN"))
## helper function
parse_stattle <- function(stattle_list, entry) {
x <- do.call("rbind", lapply(stattle_list, function(x) x[[entry]]))
stopifnot(is.data.frame(x))
return(x)
}
games_ss <- ss_get_result(ep="games", walk = TRUE)
games <- parse_stattle(games_ss, "games")
head(games)
games <- filter(games, interval_type=='regularseason')
head(games)
games <- filter(games, interval_type=='regularseason')
games <- select(games,
id,
scoreline,
home_team_id,
away_team_id,
winning_team_id,
attendance,
duration,
home_team_score,
away_team_score,
score_differential,
home_team_outcome,
away_team_outcome)
teams <- parse_stattle(games_ss, "home_teams")
teams <- unique(teams) %>%
select(id,
location,
name,
nickname,
slug)
head(teams)
head(games)
games <- parse_stattle(games_ss, "games")
games <- filter(games, interval_type=='regularseason')
colnames(games)
head(started_at)
head(games$started_at)
games <- parse_stattle(games_ss, "games")
games <- filter(games, interval_type=='regularseason')
games <- select(games,
id,
started_at,
scoreline,
home_team_id,
away_team_id,
winning_team_id,
attendance,
duration,
home_team_score,
away_team_score,
score_differential,
home_team_outcome,
away_team_outcome)
library(stattleshipR)
library(dplyr)
library(lubridate)
library(stringr)
games <- parse_stattle(games_ss, "games")
games <- filter(games, interval_type=='regularseason')
games <- select(games,
id,
started_at,
ended_at,
scoreline,
home_team_id,
away_team_id,
winning_team_id,
attendance,
duration,
home_team_score,
away_team_score,
score_differential,
home_team_outcome,
away_team_outcome)
games <- parse_stattle(games_ss, "games")
games <- filter(games, interval_type=='regularseason')
games <- select(games,
id,
started_at,
ended_at,
scoreline,
home_team_id,
away_team_id,
winning_team_id,
attendance,
duration,
home_team_score,
away_team_score,
score_differential,
home_team_outcome,
away_team_outcome)
games <- parse_stattle(games_ss, "games") %>%
filter(interval_type=='regularseason') %>%
select(id,
started_at,
ended_at,
scoreline,
home_team_id,
away_team_id,
winning_team_id,
attendance,
duration,
home_team_score,
away_team_score,
score_differential,
home_team_outcome,
away_team_outcome)
teams <- parse_stattle(games_ss, "home_teams")
teams <- parse_stattle(games_ss, "home_teams") %>%
unique(teams) %>%
select(id,
location,
name,
nickname,
slug)
teams <- parse_stattle(games_ss, "home_teams") %>%
unique(.) %>%
select(id,
location,
name,
nickname,
slug)
build_import <- function(NEO_SHELL="~/neo4j-community-2.3.1/bin/neo4j-shell",
cypher_file) {
cmd = sprintf("%s -file %s", NEO_SHELL, cypher_file)
system(cmd)
}
shiny::runGitHub("nhl-shiny", "btibert3")
shiny::runGitHub("nhl-shiny", "btibert3")
library(RNeo4j)
graph <- startGraph("http://localhost:7474/db/data/",
username = "neo4j",
password = "password")
## factors are the devil
options(stringsAsFactors = FALSE)
## un-comment below to install the packages if necessary
# install.packages("devtools")
# devtools::install_github("stattleship/stattleship-r")
# install.packages("dplyr")
# install.packages("lubridate")
# install.packages("stringr")
## packages
library(stattleshipR)
library(dplyr)
library(lubridate)
library(stringr)
## set the token from an environment variable
set_token(Sys.getenv("STATTLE_TOKEN"))
# set_token("yourtokenhere")
###############################################################################
## A few helper functions
###############################################################################
## parse out entries from ss_get_result when walk=T and length > 1
parse_stattle <- function(stattle_list, entry) {
x <- do.call("rbind", lapply(stattle_list, function(x) x[[entry]]))
stopifnot(is.data.frame(x))
return(x)
}
## helper function to import cql files against neo4j import shell tool
## set NEO_SHELL to your locally running neo4j server shell
build_import <- function(NEO_SHELL="~/neo4j-community-2.3.1/bin/neo4j-shell",
cypher_file) {
cmd = sprintf("%s -file %s", NEO_SHELL, cypher_file)
system(cmd)
}
###############################################################################
## A few calls against the Stattleship API gives us everything we need
###############################################################################
## get all of the games for the 2015-16 season
# games_ss <- ss_get_result(ep="games", query=list(status="ended"), walk = TRUE)
games_ss <- ss_get_result(ep="games", walk = TRUE)
## parse out the games and keep the columns we want (regular season only)
games <- parse_stattle(games_ss, "games") %>%
filter(interval_type=='regularseason') %>%
select(id,
started_at,
ended_at,
scoreline,
home_team_id,
away_team_id,
winning_team_id,
attendance,
duration,
home_team_score,
away_team_score,
score_differential,
home_team_outcome,
away_team_outcome)
## parse out the teams from the games API -- need to do that just once
teams <- parse_stattle(games_ss, "home_teams") %>%
unique(.) %>%
select(id,
location,
name,
nickname,
slug)
## write the datafiles as csvs for neo import and future use
# save.image(file="data/session.Rdata")
write.table(games, file="data/games.csv", sep=",", row.names=F, na="")
write.table(teams, file="data/teams.csv", sep=",", row.names=F, na="")
###############################################################################
## Setup
###############################################################################
## connect to a running neo4j server , most likely this is running locally
graph <- startGraph("http://localhost:7474/db/data/",
username = "neo4j",
password = "password")
library(RNeo4j)
## connect to a running neo4j server , most likely this is running locally
graph <- startGraph("http://localhost:7474/db/data/",
username = "neo4j",
password = "password")
## clear the ENTIRE graph database -- will make clean slate
clear(graph, input=FALSE)
build_import(cypher_file="cql/constraints.cql")
options(stringsAsFactors = FALSE)
library(stattleshipR)
library(dplyr)
library(lubridate)
library(stringr)
library(RNeo4j)
## set the token from an environment variable
set_token(Sys.getenv("STATTLE_TOKEN"))
# set_token("yourtokenhere")
parse_stattle <- function(stattle_list, entry) {
x <- do.call("rbind", lapply(stattle_list, function(x) x[[entry]]))
stopifnot(is.data.frame(x))
return(x)
}
games_ss <- ss_get_result(ep="games", query=list(status="ended"), walk = TRUE)
games <- parse_stattle(games_ss, "games")
colnames(games)
head(games)
Sys.Date(1452569400)
as.POSIXct(1452569400, origin="1970-01-01")
as.POSIXct(1452569400, origin="1970-01-01", tz = "GMT")
games <- parse_stattle(games_ss, "games") %>%
filter(interval_type=='regularseason') %>%
select(id,
started_at,
timestamp,
scoreline,
home_team_id,
away_team_id,
winning_team_id,
attendance,
duration,
home_team_score,
away_team_score,
score_differential,
home_team_outcome,
away_team_outcome)
head(games)
teams <- parse_stattle(games_ss, "home_teams") %>%
unique %>%
select(id,
location,
name,
nickname,
slug)
write.table(games, file="data/games.csv", sep=",", row.names=F, na="")
write.table(teams, file="data/teams.csv", sep=",", row.names=F, na="")
write.table(games, file="data/games.csv", sep=",", row.names=F, na="")
write.table(teams, file="data/teams.csv", sep=",", row.names=F, na="")
str(games)
head(games$started_at)
games <- transform(games, started_at2 = parse_date_time(started_at, "Y!-m*!-d!TH!:M!:S!-z*!"))
games <- transform(games, started_at2 = parse_date_time(started_at, "%Y-%m-%dT%H:%M:%S%z"))
games <- transform(games, started_at2 = strptime(started_at, "%Y-%m-%dT%H:%M:%S%z"))
head(games)
games <- transform(games, started_at2 = parse_date_time(started_at)
)
games <- transform(games, started_at2 = parse_date_time(started_at, "%Y-%m-%dT%H:%M:%S%z"))
games <- transform(games, started_at2 = parse_date_time(started_at, "Y-m-dTH:M:Sz"))
teams <- parse_stattle(games_ss, "home_teams") %>%
unique %>%
select(id,
location,
name,
nickname,
slug)
write.table(games, file="data/games.csv", sep=",", row.names=F, na="")
write.table(teams, file="data/teams.csv", sep=",", row.names=F, na="")
## factors are the devil
options(stringsAsFactors = FALSE)
## un-comment below to install the packages if necessary
# install.packages("devtools")
# devtools::install_github("stattleship/stattleship-r")
# install.packages("dplyr")
# install.packages("lubridate")
# install.packages("stringr")
# devtools::install_github("nicolewhite/RNeo4j")
## packages -- if errors, see above
library(stattleshipR)
library(dplyr)
library(lubridate)
library(stringr)
library(RNeo4j)
set_token(Sys.getenv("STATTLE_TOKEN"))
parse_stattle <- function(stattle_list, entry) {
x <- do.call("rbind", lapply(stattle_list, function(x) x[[entry]]))
stopifnot(is.data.frame(x))
return(x)
}
games_ss <- ss_get_result(ep="games", query=list(status="ended"), walk = TRUE)
## factors are the devil
options(stringsAsFactors = FALSE)
## un-comment below to install the packages if necessary
# install.packages("devtools")
# devtools::install_github("stattleship/stattleship-r")
# install.packages("dplyr")
# install.packages("lubridate")
# install.packages("stringr")
# devtools::install_github("nicolewhite/RNeo4j")
## packages -- if errors, see above
library(stattleshipR)
library(dplyr)
library(lubridate)
library(stringr)
library(RNeo4j)
set_token(Sys.getenv("STATTLE_TOKEN"))
parse_stattle <- function(stattle_list, entry) {
x <- do.call("rbind", lapply(stattle_list, function(x) x[[entry]]))
stopifnot(is.data.frame(x))
return(x)
}
games_ss <- ss_get_result(ep="games",
query=list(status="ended"),
walk = TRUE)
games <- parse_stattle(games_ss, "games") %>%
filter(interval_type=='regularseason') %>%
select(id,
started_at,
timestamp,
scoreline,
home_team_id,
away_team_id,
winning_team_id,
attendance,
duration,
home_team_score,
away_team_score,
score_differential,
home_team_outcome,
away_team_outcome)
teams <- parse_stattle(games_ss, "home_teams") %>%
unique %>%
select(id,
location,
name,
nickname,
slug)
write.table(games, file="data/games.csv", sep=",", row.names=F, na="")
write.table(teams, file="data/teams.csv", sep=",", row.names=F, na="")
## parse out the games and keep the columns we want (regular season only)
games <- parse_stattle(games_ss, "games") %>%
filter(interval_type=='regularseason') %>%
select(id,
started_at,
scoreline,
home_team_id,
away_team_id,
winning_team_id,
attendance,
duration,
home_team_score,
away_team_score,
score_differential,
home_team_outcome,
away_team_outcome)
## parse out the teams from the games API -- need to do that just once
teams <- parse_stattle(games_ss, "home_teams") %>%
unique %>%
select(id,
location,
name,
nickname,
slug)
head(games$started_at)
strptime(games$started_at[1:5], "%Y-%m-%dT%H:%M:%S")
games <- transform(games,
star_date = strptime(started_at[1:5], "%Y-%m-%dT%H:%M:%S"))
games <- transform(games,
star_date = strptime(started_at, "%Y-%m-%dT%H:%M:%S"))
head(games)
## parse out the games and keep the columns we want (regular season only)
games <- parse_stattle(games_ss, "games") %>%
filter(interval_type=='regularseason') %>%
select(id,
started_at,
scoreline,
home_team_id,
away_team_id,
winning_team_id,
attendance,
duration,
home_team_score,
away_team_score,
score_differential,
home_team_outcome,
away_team_outcome)
## parse out the teams from the games API -- need to do that just once
teams <- parse_stattle(games_ss, "home_teams") %>%
unique %>%
select(id,
location,
name,
nickname,
slug)
## extract dateparts from started date
games <- transform(games,
start_date = strptime(started_at, "%Y-%m-%dT%H:%M:%S"))
head(games)
games <- transform(games,
year = year(start_date),
month = month(start_date),
day = day(start_date))
head(games)
head(games)
games$started_at <- NULL
games$start_date <- NULL
head(games)
write.table(games, file="data/games.csv", sep=",", row.names=F, na="")
write.table(teams, file="data/teams.csv", sep=",", row.names=F, na="")
